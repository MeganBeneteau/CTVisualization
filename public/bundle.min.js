'use strict';

/* App Module */

var ctApp = angular.module('ctApp', [
  'ngRoute',
  'ctMain',
]);

ctApp.config(['$routeProvider',
  function($routeProvider) {
    $routeProvider.
      when('/', {
        templateUrl: 'components/Main/main.html',
        controller: 'MainController'
      }).
      otherwise({
        redirectTo: '/'
      });
  }]);


var container;

var camera, scene, renderer;
var cameraCube, sceneCube;

var mesh, lightMesh, geometry;
var spheres = [];

var directionalLight, pointLight;

var mouseX = 0;
var mouseY = 0;

var rx = 5000;
var ry = 5000;

var windowHalfX = 640 / 2;
var windowHalfY = 480 / 2;


function init() {

  container = $('#main');

  camera = new THREE.PerspectiveCamera( 60, 640/480, 1, 100000 );
  camera.position.z = 3200;

  cameraCube = new THREE.PerspectiveCamera( 60, 640/480, 1, 100000 );

  scene = new THREE.Scene();
  sceneCube = new THREE.Scene();

  var geometry = new THREE.SphereBufferGeometry( 100, 32, 16 );

  var path = "assets/images/pisa/";
  var format = '.png';
  var urls = [
    path + 'px' + format, path + 'nx' + format,
    path + 'py' + format, path + 'ny' + format,
    path + 'pz' + format, path + 'nz' + format
  ];

  var textureCube = new THREE.CubeTextureLoader().load( urls );
  var material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );

  for ( var i = 0; i < 500; i ++ ) {

    var mesh = new THREE.Mesh( geometry, material );

    mesh.position.x = Math.random() * 10000 - 5000;
    mesh.position.y = Math.random() * 10000 - 5000;
    mesh.position.z = Math.random() * 10000 - 5000;

    mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 3 + 1;

    scene.add( mesh );

    spheres.push( mesh );

  }

  // Skybox

  var shader = THREE.ShaderLib[ "cube" ];
  shader.uniforms[ "tCube" ].value = textureCube;

  var material = new THREE.ShaderMaterial( {

    fragmentShader: shader.fragmentShader,
    vertexShader: shader.vertexShader,
    uniforms: shader.uniforms,
    depthWrite: false,
    side: THREE.BackSide

  } ),

  mesh = new THREE.Mesh( new THREE.BoxGeometry( 100, 100, 100 ), material );
  sceneCube.add( mesh );

  //

  renderer = new THREE.WebGLRenderer();
  renderer.setPixelRatio( window.devicePixelRatio );
  renderer.setSize( 640, 480 );
  renderer.autoClear = false;
  renderer.domElement.setAttribute('id', 'canvas');
  container.append( renderer.domElement );

  //

  window.addEventListener( 'resize', onWindowResize, false );

}

function onWindowResize() {

  windowHalfX = 640 / 2;
  windowHalfY = 480 / 2;

  camera.aspect = 640/480;
  camera.updateProjectionMatrix();

  cameraCube.aspect = 640/480;
  cameraCube.updateProjectionMatrix();


  renderer.setSize( 640, 480 );

}

function onDocumentMouseMove( event ) {

  mouseX = ( event.clientX - 640 ) * 10;
  mouseY = ( event.clientY - 480 ) * 10;

}

function animate() {

  requestAnimationFrame( animate );

  render();

}

function render() {

  var timer = 0.0001 * Date.now();

  for ( var i = 0, il = spheres.length; i < il; i ++ ) {

    var sphere = spheres[ i ];

    sphere.position.x = rx * Math.cos( timer + i );
    sphere.position.y = ry * Math.sin( timer + i * 1.1 );

  }

  camera.position.x += ( mouseX - camera.position.x ) * 0.05;
  camera.position.y += ( - mouseY - camera.position.y ) * 0.05;

  camera.lookAt( scene.position );
  cameraCube.rotation.copy( camera.rotation );

  renderer.render( sceneCube, cameraCube );
  renderer.render( scene, camera );

}


$(document).on('readyForCanvas', function(event) {
  console.log("readyForCanvas");
  init();
  animate();
  $("#canvas").on( 'mousemove', onDocumentMouseMove );
});

$(document).on('rotationValueChanged', function(event, x, y) {
  console.log('rotationValueChanged: ' + x + ', ' + y);
  rx = x;
  ry = y;
});


var container;

var camera, sceneFirstPass, sceneSecondPass, renderer;
var rtTexture;
var cubeTexture;
var transferTexture;

var materialFirstPass, materialSecondPass;

var mesh, geometry;
var spheres = [];

var vertexShader1, fragmentShader1;
var vertexShader2, fragmentShader2;

var screenSize = {x: 640, y: 480};
var windowHalfX = screenSize.x / 2;
var windowHalfY = screenSize.y / 2;

function loadResource(url, callback) {
  $.ajax({
    url: url,
    success: function(data) {
      return callback(null, data);
    },
    error: function(err) {
      return callback(err, null);
    }
  });
}

// Load shaders
function loadShaders() {
  console.log("HELLO");
  loadResource('/assets/shaders/raycaster.firstpass.vs', function(err, data) {
    if(err) {
      console.log(err);
    }
    vertexShader1 = data;

    loadResource('/assets/shaders/raycaster.firstpass.fs', function(err, data) {
      if(err) {
        console.log(err);
      }
      fragmentShader1 = data;

      loadResource('/assets/shaders/raycaster.secondpass.vs', function(err, data) {
        if(err) {
          console.log(err);
        }
        vertexShader2 = data;

        loadResource('/assets/shaders/raycaster.secondpass.fs', function(err, data) {
          if(err) {
            console.log(err);
          }
          fragmentShader2 = data;
          init();
        });
      });
    });
  });
}


function init() {

  container = $('#main');

  camera = new THREE.PerspectiveCamera( 60, screenSize.x/screenSize.y, 0.1, 100000 );
  camera.position.z = 2;

  sceneFirstPass = new THREE.Scene();
	sceneSecondPass = new THREE.Scene();

  cubeTexture = THREE.ImageUtils.loadTexture('/assets/images/bonsai.raw.png' );
  cubeTexture.generateMipmaps = false;
  cubeTexture.minFilter = THREE.LinearFilter;
  cubeTexture.magFilter = THREE.LinearFilter;

  transferTexture = updateTransferFunction();

  rtTexture = new THREE.WebGLRenderTarget( screenSize.x, screenSize.y,
														{ 	minFilter: THREE.LinearFilter,
															magFilter: THREE.LinearFilter,
															wrapS:  THREE.ClampToEdgeWrapping,
															wrapT:  THREE.ClampToEdgeWrapping,
															format: THREE.RGBFormat,
															type: THREE.FloatType,
															generateMipmaps: false} );


  materialFirstPass = new THREE.ShaderMaterial( {
  	vertexShader: vertexShader1,
  	fragmentShader: fragmentShader1,
  	side: THREE.BackSide
  } );

	materialSecondPass = new THREE.ShaderMaterial( {
  	vertexShader: vertexShader2,
  	fragmentShader: fragmentShader2,
		side: THREE.FrontSide,
		uniforms: {
      tex:  {
        type: "t",
        value: rtTexture
      },
			cubeTex:
      {
        type: "t",
        value: cubeTexture
      },
			transferTex:
      {
        type: "t",
        value: transferTexture
      },
			steps : {
        type: "1f" ,
        value: 256
      },
			alphaCorrection : {
        type: "1f" ,
        value: 1.0
      }
    }
	 });


  // Geometry setup
	var boxGeometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
	boxGeometry.doubleSided = true;
	var meshFirstPass = new THREE.Mesh( boxGeometry, materialFirstPass );
	var meshSecondPass = new THREE.Mesh( boxGeometry, materialSecondPass );
	sceneFirstPass.add( meshFirstPass );
	sceneSecondPass.add( meshSecondPass );


  renderer = new THREE.WebGLRenderer();
  renderer.setPixelRatio( window.devicePixelRatio );
  renderer.setSize( screenSize.x, screenSize.y );
  renderer.autoClear = true;
  renderer.setClearColor("#FFFFFF");
  console.log("clear color: ");
  console.log(renderer.getClearColor());
  renderer.domElement.setAttribute('id', 'canvas');
  container.append( renderer.domElement );

  var b = new THREE.BoxGeometry(2,2,2);
  var bmat = new THREE.MeshBasicMaterial({color: "#FF0000"});

  var bmesh = new THREE.Mesh(b, bmat);
  bmesh.position.x = 0;
  bmesh.position.y = 0;
  bmesh.position.z = 0;

  //sceneSecondPass.add(bmesh);

  window.addEventListener( 'resize', onWindowResize, false );

  animate();
}

function onWindowResize() {

  windowHalfX = screenSize.x / 2;
  windowHalfY = screenSize.y / 2;

  camera.aspect = screenSize.x/screenSize.y;
  camera.updateProjectionMatrix();

  renderer.setSize( screenSize.x, screenSize.y );

}


function animate() {

  requestAnimationFrame( animate );

  render();

}

function render() {

  //var delta = clock.getDelta();
	//Render first pass and store the world space coords of the back face fragments into the texture.
	renderer.render( sceneFirstPass, camera, rtTexture, true );
	//Render the second pass and perform the volume rendering.
	renderer.render( sceneSecondPass, camera );
	materialSecondPass.uniforms.steps.value = 256;
	materialSecondPass.uniforms.alphaCorrection.value = 1.0;

}

function updateTextures(value) {
  materialSecondPass.uniforms.transferTex.value = updateTransferFunction();
}

function updateTransferFunction() {
	var canvas = document.createElement('canvas');
	canvas.height = 20;
	canvas.width = 256;
	var ctx = canvas.getContext('2d');
	var grd = ctx.createLinearGradient(0, 0, canvas.width -1 , canvas.height - 1);
	grd.addColorStop(0.1, "#00FF00");
	grd.addColorStop(0.7, "#FF0000");
	grd.addColorStop(1.0, "#0000FF");
	ctx.fillStyle = grd;
	ctx.fillRect(0,0,canvas.width -1 ,canvas.height -1 );

  var img = document.getElementById("transferTexture");
				img.src = canvas.toDataURL();
				img.style.width = "256 px";
				img.style.height = "128 px";

	transferTexture =  new THREE.Texture(canvas);
	transferTexture.wrapS = transferTexture.wrapT =  THREE.ClampToEdgeWrapping;
	transferTexture.needsUpdate = true;
	return transferTexture;
}


$(document).on('readyForCanvasRaycaster', function(event) {
  console.log("readyForCanvasRaycaster");
  loadShaders();
  $("#canvas").on( 'mousemove', onDocumentMouseMove );
});

$(document).on('rotationValueChanged', function(event, x, y) {
  console.log('rotationValueChanged: ' + x + ', ' + y);
  rx = x;
  ry = y;
});


'use strict';

var main = angular.module('ctMain', []);

main.controller('MainController', ['$scope', function($scope) {
  $(document).trigger('readyForCanvasRaycaster');

  $scope.updateRotation = function() {
    console.log("onClickRotationChanged");
    $(document).trigger('rotationValueChanged', [parseInt($scope.rotation.x), parseInt($scope.rotation.y)]);
  };

  var randomdata = [];
  for( var i = 0; i < 20; i++) {
    randomdata[i] = [];
    for( var j = 0; j < 100; j++) {
      randomdata[i][j] = [];
      for( var k = 0; k < 100; k++) {
        randomdata[i][j].push(Math.floor(Math.random()*4096));
      }
    }
  }
  console.log("Hello mosaic");
  $("#test").append(mosaic.createMosaicImage(100, 100, randomdata));
}]);


var mosaic = {};

mosaic.createOneImage = function(sizex, sizey, data) {
	var canvas = document.createElement("canvas");
	canvas.setAttribute("width", sizex);
	canvas.setAttribute("height", sizey);
	var ctx = canvas.getContext('2d');
	console.log("one img data length: " + data.length);

	for(var i = 0; i < data.length; i++) {
		for(var j = 0; j < data[0].length; j++) {
			var id = ctx.createImageData(1,1);
			// Use bitmask for spliting the uint16 value into two uint8 to fit into img
			id.data[0] = data[i][j] & 0xFF00;	// r
			id.data[1] = data[i][j] & 0x00FF;	// g
			id.data[2] = 0;	// b
			id.data[3] = 255;	// a
			ctx.putImageData(id, j, i); // row based, so add to x=j, y=i
		//	console.log("R: " + p[0] + " G:" + p[1]);
		}
	}

	var image = new Image();
	image.src = canvas.toDataURL("/image/png");
	return image;
}

mosaic.createMosaicImage = function(sizex, sizey, data) {
	var canvas = document.createElement("canvas");
	canvas.setAttribute("width", data[0].length*sizex);
	canvas.setAttribute("height", sizey);
	var ctx = canvas.getContext('2d');
	var imgarr = [];
	for(var i = 0; i < data.length; i++) {
		console.log("data[i]: " + data[i].length);
		imgarr.push(this.createOneImage(sizex, sizey, data[i]));
		ctx.drawImage(imgarr[i], sizex*i, 0, sizex, sizey);
	}
	var img = new Image();
	img.src = canvas.toDataURL("/image/png");
	console.log("Finished reading and creating img");
	return img;
}

//# sourceMappingURL=data:application/json;base64,
