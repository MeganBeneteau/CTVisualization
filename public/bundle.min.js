'use strict';

/* App Module */

var ctApp = angular.module('ctApp', [
  'ngRoute',
  'ctMain',
]);

ctApp.config(['$routeProvider',
  function($routeProvider) {
    $routeProvider.
      when('/', {
        templateUrl: 'components/Main/main.html',
        controller: 'MainController'
      }).
      otherwise({
        redirectTo: '/'
      });
  }]);


var container;

var camera, scene, renderer;
var cameraCube, sceneCube;

var mesh, lightMesh, geometry;
var spheres = [];

var directionalLight, pointLight;

var mouseX = 0;
var mouseY = 0;

var rx = 5000;
var ry = 5000;

var windowHalfX = 640 / 2;
var windowHalfY = 480 / 2;


function init() {

  container = $('#main');

  camera = new THREE.PerspectiveCamera( 60, 640/480, 1, 100000 );
  camera.position.z = 3200;

  cameraCube = new THREE.PerspectiveCamera( 60, 640/480, 1, 100000 );

  scene = new THREE.Scene();
  sceneCube = new THREE.Scene();

  var geometry = new THREE.SphereBufferGeometry( 100, 32, 16 );

  var path = "assets/images/pisa/";
  var format = '.png';
  var urls = [
    path + 'px' + format, path + 'nx' + format,
    path + 'py' + format, path + 'ny' + format,
    path + 'pz' + format, path + 'nz' + format
  ];

  var textureCube = new THREE.CubeTextureLoader().load( urls );
  var material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );

  for ( var i = 0; i < 500; i ++ ) {

    var mesh = new THREE.Mesh( geometry, material );

    mesh.position.x = Math.random() * 10000 - 5000;
    mesh.position.y = Math.random() * 10000 - 5000;
    mesh.position.z = Math.random() * 10000 - 5000;

    mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 3 + 1;

    scene.add( mesh );

    spheres.push( mesh );

  }

  // Skybox

  var shader = THREE.ShaderLib[ "cube" ];
  shader.uniforms[ "tCube" ].value = textureCube;

  var material = new THREE.ShaderMaterial( {

    fragmentShader: shader.fragmentShader,
    vertexShader: shader.vertexShader,
    uniforms: shader.uniforms,
    depthWrite: false,
    side: THREE.BackSide

  } ),

  mesh = new THREE.Mesh( new THREE.BoxGeometry( 100, 100, 100 ), material );
  sceneCube.add( mesh );

  //

  renderer = new THREE.WebGLRenderer();
  renderer.setPixelRatio( window.devicePixelRatio );
  renderer.setSize( 640, 480 );
  renderer.autoClear = false;
  renderer.domElement.setAttribute('id', 'canvas');
  container.append( renderer.domElement );

  //

  window.addEventListener( 'resize', onWindowResize, false );

}

function onWindowResize() {

  windowHalfX = 640 / 2;
  windowHalfY = 480 / 2;

  camera.aspect = 640/480;
  camera.updateProjectionMatrix();

  cameraCube.aspect = 640/480;
  cameraCube.updateProjectionMatrix();


  renderer.setSize( 640, 480 );

}

function onDocumentMouseMove( event ) {

  mouseX = ( event.clientX - 640 ) * 10;
  mouseY = ( event.clientY - 480 ) * 10;

}

function animate() {

  requestAnimationFrame( animate );

  render();

}

function render() {

  var timer = 0.0001 * Date.now();

  for ( var i = 0, il = spheres.length; i < il; i ++ ) {

    var sphere = spheres[ i ];

    sphere.position.x = rx * Math.cos( timer + i );
    sphere.position.y = ry * Math.sin( timer + i * 1.1 );

  }

  camera.position.x += ( mouseX - camera.position.x ) * 0.05;
  camera.position.y += ( - mouseY - camera.position.y ) * 0.05;

  camera.lookAt( scene.position );
  cameraCube.rotation.copy( camera.rotation );

  renderer.render( sceneCube, cameraCube );
  renderer.render( scene, camera );

}


$(document).on('readyForCanvas', function(event) {
  console.log("readyForCanvas");
  init();
  animate();
  $("#canvas").on( 'mousemove', onDocumentMouseMove );
});

$(document).on('rotationValueChanged', function(event, x, y) {
  console.log('rotationValueChanged: ' + x + ', ' + y);
  rx = x;
  ry = y;
});


var container;

var camera, sceneFirstPass, sceneSecondPass, renderer;
var rtTexture;
var cubeTexture;
var transferTexture;

var materialFirstPass, materialSecondPass;

var mesh, geometry;
var spheres = [];

var vertexShader1, fragmentShader1;
var vertexShader2, fragmentShader2;

var screenSize = {x: 640, y: 480};
var windowHalfX = screenSize.x / 2;
var windowHalfY = screenSize.y / 2;

function loadResource(url, callback) {
  $.ajax({
    url: url,
    success: function(data) {
      return callback(null, data);
    },
    error: function(err) {
      return callback(err, null);
    }
  });
}

// Load shaders
function loadShaders() {
  console.log("HELLO");
  loadResource('/assets/shaders/raycaster.firstpass.vs', function(err, data) {
    if(err) {
      console.log(err);
    }
    vertexShader1 = data;

    loadResource('/assets/shaders/raycaster.firstpass.fs', function(err, data) {
      if(err) {
        console.log(err);
      }
      fragmentShader1 = data;

      loadResource('/assets/shaders/raycaster.secondpass.vs', function(err, data) {
        if(err) {
          console.log(err);
        }
        vertexShader2 = data;

        loadResource('/assets/shaders/raycaster.secondpass.fs', function(err, data) {
          if(err) {
            console.log(err);
          }
          fragmentShader2 = data;
          init();
        });
      });
    });
  });
}


function init() {

  container = $('#main');

  camera = new THREE.PerspectiveCamera( 60, screenSize.x/screenSize.y, 0.1, 100000 );
  camera.position.z = 2;

  sceneFirstPass = new THREE.Scene();
	sceneSecondPass = new THREE.Scene();

  var randomdata = [];
  for( var i = 0; i < 64; i++) {
    randomdata[i] = [];
    for( var j = 0; j < 64; j++) {
      randomdata[i][j] = [];
      for( var k = 0; k < 64; k++) {
        randomdata[i][j].push(Math.floor(Math.random()*4095));
        if(Math.random()*1 >= 1/64.0*i*1.1) {
          randomdata[i][j][k] = 0.0;
        }
      }
    }
    console.log("random data progress: " + i/64 + " %");
  }

  var image = mosaic.createMosaicImage(64,64,randomdata);//THREE.ImageUtils.loadTexture('/assets/images/bonsai.raw.png' );
  console.log(image);
  cubeTexture = new THREE.Texture(image);
  console.log(cubeTexture);
  //cubeTexture = THREE.ImageUtils.loadTexture('/assets/images/bonsai.raw.png');
  cubeTexture.generateMipmaps = false;
  cubeTexture.minFilter = THREE.LinearFilter;
  cubeTexture.magFilter = THREE.LinearFilter;

  //$("#test").append(image);

  transferTexture = updateTransferFunction();

  rtTexture = new THREE.WebGLRenderTarget( screenSize.x, screenSize.y,
														{ 	minFilter: THREE.LinearFilter,
															magFilter: THREE.LinearFilter,
															wrapS:  THREE.ClampToEdgeWrapping,
															wrapT:  THREE.ClampToEdgeWrapping,
															format: THREE.RGBFormat,
															type: THREE.FloatType,
															generateMipmaps: false} );


  materialFirstPass = new THREE.ShaderMaterial( {
  	vertexShader: vertexShader1,
  	fragmentShader: fragmentShader1,
  	side: THREE.BackSide
  } );

	materialSecondPass = new THREE.ShaderMaterial( {
  	vertexShader: vertexShader2,
  	fragmentShader: fragmentShader2,
		side: THREE.FrontSide,
		uniforms: {
      tex:  {
        type: "t",
        value: rtTexture
      },
			cubeTex:
      {
        type: "t",
        value: cubeTexture
      },
			transferTex:
      {
        type: "t",
        value: transferTexture
      },
			steps : {
        type: "1f" ,
        value: 64
      },
			alphaCorrection : {
        type: "1f" ,
        value: 1.0
      }
    }
	 });


  // Geometry setup
	var boxGeometry = new THREE.BoxGeometry(1.0, 1.0, 1.0);
	boxGeometry.doubleSided = true;
	var meshFirstPass = new THREE.Mesh( boxGeometry, materialFirstPass );
	var meshSecondPass = new THREE.Mesh( boxGeometry, materialSecondPass );
	sceneFirstPass.add( meshFirstPass );
	sceneSecondPass.add( meshSecondPass );


  renderer = new THREE.WebGLRenderer();
  renderer.setPixelRatio( window.devicePixelRatio );
  renderer.setSize( screenSize.x, screenSize.y );
  renderer.autoClear = true;
  renderer.setClearColor("#FFFFFF");
  console.log("clear color: ");
  console.log(renderer.getClearColor());
  renderer.domElement.setAttribute('id', 'canvas');
  container.append( renderer.domElement );

  var b = new THREE.BoxGeometry(2,2,2);
  var bmat = new THREE.MeshBasicMaterial({color: "#FF0000"});

  var bmesh = new THREE.Mesh(b, bmat);
  bmesh.position.x = 0;
  bmesh.position.y = 0;
  bmesh.position.z = 0;

  //sceneSecondPass.add(bmesh);

  window.addEventListener( 'resize', onWindowResize, false );

  animate();
}

function onWindowResize() {

  windowHalfX = screenSize.x / 2;
  windowHalfY = screenSize.y / 2;

  camera.aspect = screenSize.x/screenSize.y;
  camera.updateProjectionMatrix();

  renderer.setSize( screenSize.x, screenSize.y );

}


function animate() {

  requestAnimationFrame( animate );

  render();

}

function render() {

  //var delta = clock.getDelta();
	//Render first pass and store the world space coords of the back face fragments into the texture.
	renderer.render( sceneFirstPass, camera, rtTexture, true );
	//Render the second pass and perform the volume rendering.
	renderer.render( sceneSecondPass, camera );
	materialSecondPass.uniforms.steps.value = 256;
	materialSecondPass.uniforms.alphaCorrection.value = 1.0;

}

function updateTextures(value) {
  materialSecondPass.uniforms.transferTex.value = updateTransferFunction();
}

function updateTransferFunction() {
	var canvas = document.createElement('canvas');
	canvas.height = 20;
	canvas.width = 256;
	var ctx = canvas.getContext('2d');
	var grd = ctx.createLinearGradient(0, 0, canvas.width -1 , canvas.height - 1);
	grd.addColorStop(0.1, "#00FF00");
	grd.addColorStop(0.7, "#FF0000");
	grd.addColorStop(1.0, "#0000FF");
	ctx.fillStyle = grd;
	ctx.fillRect(0,0,canvas.width -1 ,canvas.height -1 );

  var img = document.getElementById("transferTexture");
				img.src = canvas.toDataURL();
				img.style.width = "256 px";
				img.style.height = "20 px";

	transferTexture =  new THREE.Texture(canvas);
	transferTexture.wrapS = transferTexture.wrapT =  THREE.ClampToEdgeWrapping;
	transferTexture.needsUpdate = true;
	return transferTexture;
}


$(document).on('readyForCanvasRaycaster', function(event) {
  console.log("readyForCanvasRaycaster");
  loadShaders();
  $("#canvas").on( 'mousemove', onDocumentMouseMove );
});

$(document).on('rotationValueChanged', function(event, x, y) {
  console.log('rotationValueChanged: ' + x + ', ' + y);
  rx = x;
  ry = y;
});


'use strict';

var main = angular.module('ctMain', []);

main.controller('MainController', ['$scope', function($scope) {
  $(document).trigger('readyForCanvasRaycaster');

  $scope.updateRotation = function() {
    console.log("onClickRotationChanged");
    $(document).trigger('rotationValueChanged', [parseInt($scope.rotation.x), parseInt($scope.rotation.y)]);
  };

  // var randomdata = [];
  // for( var i = 0; i < 128; i++) {
  //   randomdata[i] = [];
  //   for( var j = 0; j < 128; j++) {
  //     randomdata[i][j] = [];
  //     for( var k = 0; k < 128; k++) {
  //       randomdata[i][j].push(Math.floor(Math.random()*4095));
  //     }
  //   }
  //   console.log("random data progress: " + i/128) + " %";
  // }
//  console.log("Hello mosaic");
//  $("#test").append(mosaic.createMosaicImage(128, 128, randomdata));
}]);


var mosaic = {};

mosaic.createOneImage = function(sizex, sizey, data) {
	var canvas = document.createElement("canvas");
	canvas.setAttribute("width", sizex);
	canvas.setAttribute("height", sizey);
	var ctx = canvas.getContext('2d');

	for(var i = 0; i < data.length; i++) {
		for(var j = 0; j < data[0].length; j++) {
			var id = ctx.createImageData(1,1);
			var msb = data[i][j] & 0xFF00;
			msb = msb >> 8;
			var lsb = data[i][j] & 0x00FF;
			// Use bitmask for spliting the uint16 value into two uint8 to fit into img
			id.data[0] = msb;	// r
			id.data[1] = lsb;	// g
			id.data[2] = 0;	// b
			id.data[3] = Math.floor(data[i][j]/4095*255);	// a
			ctx.putImageData(id, j, i); // row based, so add to x=j, y=i
		}
	}

	var image = new Image();
	image.src = canvas.toDataURL("/image/png");
	return image;
}

mosaic.createMosaicImage = function(sizex, sizey, data) {
	var canvas = document.createElement("canvas");
	canvas.setAttribute("width", sizex*8);
	canvas.setAttribute("height", sizey*8);
	var ctx = canvas.getContext('2d');

	for(var i = 0; i < 8; i++) {
		for(var j = 0; j < 8; j++) {
			var image = this.createOneImage(sizex, sizey, data[i*j+j]);
			ctx.drawImage(image, sizex*i, sizey*j, sizex, sizey);
			console.log("image generation progress: " + Math.floor((i*j+j)/data.length*100) + " %");
		}
	}
	var img = new Image();
	img.src = canvas.toDataURL("/image/png");
	return img;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInRocmVlanMvZXhhbXBsZS5qcyIsInRocmVlanMvcmF5Y2FzdGVyLmpzIiwiY29tcG9uZW50cy9NYWluL21haW5Db250cm9sbGVyLmpzIiwidGhyZWVqcy91dGlscy9jcmVhdGVNb3NhaWNJbWFnZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBLElBQUEsUUFBQSxRQUFBLE9BQUEsU0FBQTtFQUNBO0VBQ0E7OztBQUdBLE1BQUEsT0FBQSxDQUFBO0VBQ0EsU0FBQSxnQkFBQTtJQUNBO01BQ0EsS0FBQSxLQUFBO1FBQ0EsYUFBQTtRQUNBLFlBQUE7O01BRUEsVUFBQTtRQUNBLFlBQUE7Ozs7O0FDaEJBLElBQUE7O0FBRUEsSUFBQSxRQUFBLE9BQUE7QUFDQSxJQUFBLFlBQUE7O0FBRUEsSUFBQSxNQUFBLFdBQUE7QUFDQSxJQUFBLFVBQUE7O0FBRUEsSUFBQSxrQkFBQTs7QUFFQSxJQUFBLFNBQUE7QUFDQSxJQUFBLFNBQUE7O0FBRUEsSUFBQSxLQUFBO0FBQ0EsSUFBQSxLQUFBOztBQUVBLElBQUEsY0FBQSxNQUFBO0FBQ0EsSUFBQSxjQUFBLE1BQUE7OztBQUdBLFNBQUEsT0FBQTs7RUFFQSxZQUFBLEVBQUE7O0VBRUEsU0FBQSxJQUFBLE1BQUEsbUJBQUEsSUFBQSxJQUFBLEtBQUEsR0FBQTtFQUNBLE9BQUEsU0FBQSxJQUFBOztFQUVBLGFBQUEsSUFBQSxNQUFBLG1CQUFBLElBQUEsSUFBQSxLQUFBLEdBQUE7O0VBRUEsUUFBQSxJQUFBLE1BQUE7RUFDQSxZQUFBLElBQUEsTUFBQTs7RUFFQSxJQUFBLFdBQUEsSUFBQSxNQUFBLHNCQUFBLEtBQUEsSUFBQTs7RUFFQSxJQUFBLE9BQUE7RUFDQSxJQUFBLFNBQUE7RUFDQSxJQUFBLE9BQUE7SUFDQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUE7SUFDQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUE7SUFDQSxPQUFBLE9BQUEsUUFBQSxPQUFBLE9BQUE7OztFQUdBLElBQUEsY0FBQSxJQUFBLE1BQUEsb0JBQUEsTUFBQTtFQUNBLElBQUEsV0FBQSxJQUFBLE1BQUEsbUJBQUEsRUFBQSxPQUFBLFVBQUEsUUFBQTs7RUFFQSxNQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsS0FBQSxPQUFBOztJQUVBLElBQUEsT0FBQSxJQUFBLE1BQUEsTUFBQSxVQUFBOztJQUVBLEtBQUEsU0FBQSxJQUFBLEtBQUEsV0FBQSxRQUFBO0lBQ0EsS0FBQSxTQUFBLElBQUEsS0FBQSxXQUFBLFFBQUE7SUFDQSxLQUFBLFNBQUEsSUFBQSxLQUFBLFdBQUEsUUFBQTs7SUFFQSxLQUFBLE1BQUEsSUFBQSxLQUFBLE1BQUEsSUFBQSxLQUFBLE1BQUEsSUFBQSxLQUFBLFdBQUEsSUFBQTs7SUFFQSxNQUFBLEtBQUE7O0lBRUEsUUFBQSxNQUFBOzs7Ozs7RUFNQSxJQUFBLFNBQUEsTUFBQSxXQUFBO0VBQ0EsT0FBQSxVQUFBLFVBQUEsUUFBQTs7RUFFQSxJQUFBLFdBQUEsSUFBQSxNQUFBLGdCQUFBOztJQUVBLGdCQUFBLE9BQUE7SUFDQSxjQUFBLE9BQUE7SUFDQSxVQUFBLE9BQUE7SUFDQSxZQUFBO0lBQ0EsTUFBQSxNQUFBOzs7O0VBSUEsT0FBQSxJQUFBLE1BQUEsTUFBQSxJQUFBLE1BQUEsYUFBQSxLQUFBLEtBQUEsT0FBQTtFQUNBLFVBQUEsS0FBQTs7OztFQUlBLFdBQUEsSUFBQSxNQUFBO0VBQ0EsU0FBQSxlQUFBLE9BQUE7RUFDQSxTQUFBLFNBQUEsS0FBQTtFQUNBLFNBQUEsWUFBQTtFQUNBLFNBQUEsV0FBQSxhQUFBLE1BQUE7RUFDQSxVQUFBLFFBQUEsU0FBQTs7OztFQUlBLE9BQUEsa0JBQUEsVUFBQSxnQkFBQTs7OztBQUlBLFNBQUEsaUJBQUE7O0VBRUEsY0FBQSxNQUFBO0VBQ0EsY0FBQSxNQUFBOztFQUVBLE9BQUEsU0FBQSxJQUFBO0VBQ0EsT0FBQTs7RUFFQSxXQUFBLFNBQUEsSUFBQTtFQUNBLFdBQUE7OztFQUdBLFNBQUEsU0FBQSxLQUFBOzs7O0FBSUEsU0FBQSxxQkFBQSxRQUFBOztFQUVBLFNBQUEsRUFBQSxNQUFBLFVBQUEsUUFBQTtFQUNBLFNBQUEsRUFBQSxNQUFBLFVBQUEsUUFBQTs7OztBQUlBLFNBQUEsVUFBQTs7RUFFQSx1QkFBQTs7RUFFQTs7OztBQUlBLFNBQUEsU0FBQTs7RUFFQSxJQUFBLFFBQUEsU0FBQSxLQUFBOztFQUVBLE1BQUEsSUFBQSxJQUFBLEdBQUEsS0FBQSxRQUFBLFFBQUEsSUFBQSxJQUFBLE9BQUE7O0lBRUEsSUFBQSxTQUFBLFNBQUE7O0lBRUEsT0FBQSxTQUFBLElBQUEsS0FBQSxLQUFBLEtBQUEsUUFBQTtJQUNBLE9BQUEsU0FBQSxJQUFBLEtBQUEsS0FBQSxLQUFBLFFBQUEsSUFBQTs7OztFQUlBLE9BQUEsU0FBQSxLQUFBLEVBQUEsU0FBQSxPQUFBLFNBQUEsTUFBQTtFQUNBLE9BQUEsU0FBQSxLQUFBLEVBQUEsRUFBQSxTQUFBLE9BQUEsU0FBQSxNQUFBOztFQUVBLE9BQUEsUUFBQSxNQUFBO0VBQ0EsV0FBQSxTQUFBLE1BQUEsT0FBQTs7RUFFQSxTQUFBLFFBQUEsV0FBQTtFQUNBLFNBQUEsUUFBQSxPQUFBOzs7OztBQUtBLEVBQUEsVUFBQSxHQUFBLGtCQUFBLFNBQUEsT0FBQTtFQUNBLFFBQUEsSUFBQTtFQUNBO0VBQ0E7RUFDQSxFQUFBLFdBQUEsSUFBQSxhQUFBOzs7QUFHQSxFQUFBLFVBQUEsR0FBQSx3QkFBQSxTQUFBLE9BQUEsR0FBQSxHQUFBO0VBQ0EsUUFBQSxJQUFBLDJCQUFBLElBQUEsT0FBQTtFQUNBLEtBQUE7RUFDQSxLQUFBOzs7O0FDaEtBLElBQUE7O0FBRUEsSUFBQSxRQUFBLGdCQUFBLGlCQUFBO0FBQ0EsSUFBQTtBQUNBLElBQUE7QUFDQSxJQUFBOztBQUVBLElBQUEsbUJBQUE7O0FBRUEsSUFBQSxNQUFBO0FBQ0EsSUFBQSxVQUFBOztBQUVBLElBQUEsZUFBQTtBQUNBLElBQUEsZUFBQTs7QUFFQSxJQUFBLGFBQUEsQ0FBQSxHQUFBLEtBQUEsR0FBQTtBQUNBLElBQUEsY0FBQSxXQUFBLElBQUE7QUFDQSxJQUFBLGNBQUEsV0FBQSxJQUFBOztBQUVBLFNBQUEsYUFBQSxLQUFBLFVBQUE7RUFDQSxFQUFBLEtBQUE7SUFDQSxLQUFBO0lBQ0EsU0FBQSxTQUFBLE1BQUE7TUFDQSxPQUFBLFNBQUEsTUFBQTs7SUFFQSxPQUFBLFNBQUEsS0FBQTtNQUNBLE9BQUEsU0FBQSxLQUFBOzs7Ozs7QUFNQSxTQUFBLGNBQUE7RUFDQSxRQUFBLElBQUE7RUFDQSxhQUFBLDBDQUFBLFNBQUEsS0FBQSxNQUFBO0lBQ0EsR0FBQSxLQUFBO01BQ0EsUUFBQSxJQUFBOztJQUVBLGdCQUFBOztJQUVBLGFBQUEsMENBQUEsU0FBQSxLQUFBLE1BQUE7TUFDQSxHQUFBLEtBQUE7UUFDQSxRQUFBLElBQUE7O01BRUEsa0JBQUE7O01BRUEsYUFBQSwyQ0FBQSxTQUFBLEtBQUEsTUFBQTtRQUNBLEdBQUEsS0FBQTtVQUNBLFFBQUEsSUFBQTs7UUFFQSxnQkFBQTs7UUFFQSxhQUFBLDJDQUFBLFNBQUEsS0FBQSxNQUFBO1VBQ0EsR0FBQSxLQUFBO1lBQ0EsUUFBQSxJQUFBOztVQUVBLGtCQUFBO1VBQ0E7Ozs7Ozs7O0FBUUEsU0FBQSxPQUFBOztFQUVBLFlBQUEsRUFBQTs7RUFFQSxTQUFBLElBQUEsTUFBQSxtQkFBQSxJQUFBLFdBQUEsRUFBQSxXQUFBLEdBQUEsS0FBQTtFQUNBLE9BQUEsU0FBQSxJQUFBOztFQUVBLGlCQUFBLElBQUEsTUFBQTtDQUNBLGtCQUFBLElBQUEsTUFBQTs7RUFFQSxJQUFBLGFBQUE7RUFDQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsSUFBQSxLQUFBO0lBQ0EsV0FBQSxLQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLElBQUEsS0FBQTtNQUNBLFdBQUEsR0FBQSxLQUFBO01BQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLElBQUEsS0FBQTtRQUNBLFdBQUEsR0FBQSxHQUFBLEtBQUEsS0FBQSxNQUFBLEtBQUEsU0FBQTtRQUNBLEdBQUEsS0FBQSxTQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQTtVQUNBLFdBQUEsR0FBQSxHQUFBLEtBQUE7Ozs7SUFJQSxRQUFBLElBQUEsMkJBQUEsRUFBQSxLQUFBOzs7RUFHQSxJQUFBLFFBQUEsT0FBQSxrQkFBQSxHQUFBLEdBQUE7RUFDQSxRQUFBLElBQUE7RUFDQSxjQUFBLElBQUEsTUFBQSxRQUFBO0VBQ0EsUUFBQSxJQUFBOztFQUVBLFlBQUEsa0JBQUE7RUFDQSxZQUFBLFlBQUEsTUFBQTtFQUNBLFlBQUEsWUFBQSxNQUFBOzs7O0VBSUEsa0JBQUE7O0VBRUEsWUFBQSxJQUFBLE1BQUEsbUJBQUEsV0FBQSxHQUFBLFdBQUE7Y0FDQSxHQUFBLFdBQUEsTUFBQTtlQUNBLFdBQUEsTUFBQTtlQUNBLFFBQUEsTUFBQTtlQUNBLFFBQUEsTUFBQTtlQUNBLFFBQUEsTUFBQTtlQUNBLE1BQUEsTUFBQTtlQUNBLGlCQUFBOzs7RUFHQSxvQkFBQSxJQUFBLE1BQUEsZ0JBQUE7R0FDQSxjQUFBO0dBQ0EsZ0JBQUE7R0FDQSxNQUFBLE1BQUE7OztDQUdBLHFCQUFBLElBQUEsTUFBQSxnQkFBQTtHQUNBLGNBQUE7R0FDQSxnQkFBQTtFQUNBLE1BQUEsTUFBQTtFQUNBLFVBQUE7TUFDQSxNQUFBO1FBQ0EsTUFBQTtRQUNBLE9BQUE7O0dBRUE7TUFDQTtRQUNBLE1BQUE7UUFDQSxPQUFBOztHQUVBO01BQ0E7UUFDQSxNQUFBO1FBQ0EsT0FBQTs7R0FFQSxRQUFBO1FBQ0EsTUFBQTtRQUNBLE9BQUE7O0dBRUEsa0JBQUE7UUFDQSxNQUFBO1FBQ0EsT0FBQTs7Ozs7OztDQU9BLElBQUEsY0FBQSxJQUFBLE1BQUEsWUFBQSxLQUFBLEtBQUE7Q0FDQSxZQUFBLGNBQUE7Q0FDQSxJQUFBLGdCQUFBLElBQUEsTUFBQSxNQUFBLGFBQUE7Q0FDQSxJQUFBLGlCQUFBLElBQUEsTUFBQSxNQUFBLGFBQUE7Q0FDQSxlQUFBLEtBQUE7Q0FDQSxnQkFBQSxLQUFBOzs7RUFHQSxXQUFBLElBQUEsTUFBQTtFQUNBLFNBQUEsZUFBQSxPQUFBO0VBQ0EsU0FBQSxTQUFBLFdBQUEsR0FBQSxXQUFBO0VBQ0EsU0FBQSxZQUFBO0VBQ0EsU0FBQSxjQUFBO0VBQ0EsUUFBQSxJQUFBO0VBQ0EsUUFBQSxJQUFBLFNBQUE7RUFDQSxTQUFBLFdBQUEsYUFBQSxNQUFBO0VBQ0EsVUFBQSxRQUFBLFNBQUE7O0VBRUEsSUFBQSxJQUFBLElBQUEsTUFBQSxZQUFBLEVBQUEsRUFBQTtFQUNBLElBQUEsT0FBQSxJQUFBLE1BQUEsa0JBQUEsQ0FBQSxPQUFBOztFQUVBLElBQUEsUUFBQSxJQUFBLE1BQUEsS0FBQSxHQUFBO0VBQ0EsTUFBQSxTQUFBLElBQUE7RUFDQSxNQUFBLFNBQUEsSUFBQTtFQUNBLE1BQUEsU0FBQSxJQUFBOzs7O0VBSUEsT0FBQSxrQkFBQSxVQUFBLGdCQUFBOztFQUVBOzs7QUFHQSxTQUFBLGlCQUFBOztFQUVBLGNBQUEsV0FBQSxJQUFBO0VBQ0EsY0FBQSxXQUFBLElBQUE7O0VBRUEsT0FBQSxTQUFBLFdBQUEsRUFBQSxXQUFBO0VBQ0EsT0FBQTs7RUFFQSxTQUFBLFNBQUEsV0FBQSxHQUFBLFdBQUE7Ozs7O0FBS0EsU0FBQSxVQUFBOztFQUVBLHVCQUFBOztFQUVBOzs7O0FBSUEsU0FBQSxTQUFBOzs7O0NBSUEsU0FBQSxRQUFBLGdCQUFBLFFBQUEsV0FBQTs7Q0FFQSxTQUFBLFFBQUEsaUJBQUE7Q0FDQSxtQkFBQSxTQUFBLE1BQUEsUUFBQTtDQUNBLG1CQUFBLFNBQUEsZ0JBQUEsUUFBQTs7OztBQUlBLFNBQUEsZUFBQSxPQUFBO0VBQ0EsbUJBQUEsU0FBQSxZQUFBLFFBQUE7OztBQUdBLFNBQUEseUJBQUE7Q0FDQSxJQUFBLFNBQUEsU0FBQSxjQUFBO0NBQ0EsT0FBQSxTQUFBO0NBQ0EsT0FBQSxRQUFBO0NBQ0EsSUFBQSxNQUFBLE9BQUEsV0FBQTtDQUNBLElBQUEsTUFBQSxJQUFBLHFCQUFBLEdBQUEsR0FBQSxPQUFBLE9BQUEsSUFBQSxPQUFBLFNBQUE7Q0FDQSxJQUFBLGFBQUEsS0FBQTtDQUNBLElBQUEsYUFBQSxLQUFBO0NBQ0EsSUFBQSxhQUFBLEtBQUE7Q0FDQSxJQUFBLFlBQUE7Q0FDQSxJQUFBLFNBQUEsRUFBQSxFQUFBLE9BQUEsT0FBQSxHQUFBLE9BQUEsUUFBQTs7RUFFQSxJQUFBLE1BQUEsU0FBQSxlQUFBO0lBQ0EsSUFBQSxNQUFBLE9BQUE7SUFDQSxJQUFBLE1BQUEsUUFBQTtJQUNBLElBQUEsTUFBQSxTQUFBOztDQUVBLG1CQUFBLElBQUEsTUFBQSxRQUFBO0NBQ0EsZ0JBQUEsUUFBQSxnQkFBQSxTQUFBLE1BQUE7Q0FDQSxnQkFBQSxjQUFBO0NBQ0EsT0FBQTs7OztBQUlBLEVBQUEsVUFBQSxHQUFBLDJCQUFBLFNBQUEsT0FBQTtFQUNBLFFBQUEsSUFBQTtFQUNBO0VBQ0EsRUFBQSxXQUFBLElBQUEsYUFBQTs7O0FBR0EsRUFBQSxVQUFBLEdBQUEsd0JBQUEsU0FBQSxPQUFBLEdBQUEsR0FBQTtFQUNBLFFBQUEsSUFBQSwyQkFBQSxJQUFBLE9BQUE7RUFDQSxLQUFBO0VBQ0EsS0FBQTs7OztBQzlQQTs7QUFFQSxJQUFBLE9BQUEsUUFBQSxPQUFBLFVBQUE7O0FBRUEsS0FBQSxXQUFBLGtCQUFBLENBQUEsVUFBQSxTQUFBLFFBQUE7RUFDQSxFQUFBLFVBQUEsUUFBQTs7RUFFQSxPQUFBLGlCQUFBLFdBQUE7SUFDQSxRQUFBLElBQUE7SUFDQSxFQUFBLFVBQUEsUUFBQSx3QkFBQSxDQUFBLFNBQUEsT0FBQSxTQUFBLElBQUEsU0FBQSxPQUFBLFNBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNWQSxJQUFBLFNBQUE7O0FBRUEsT0FBQSxpQkFBQSxTQUFBLE9BQUEsT0FBQSxNQUFBO0NBQ0EsSUFBQSxTQUFBLFNBQUEsY0FBQTtDQUNBLE9BQUEsYUFBQSxTQUFBO0NBQ0EsT0FBQSxhQUFBLFVBQUE7Q0FDQSxJQUFBLE1BQUEsT0FBQSxXQUFBOztDQUVBLElBQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxLQUFBLFFBQUEsS0FBQTtFQUNBLElBQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxLQUFBLEdBQUEsUUFBQSxLQUFBO0dBQ0EsSUFBQSxLQUFBLElBQUEsZ0JBQUEsRUFBQTtHQUNBLElBQUEsTUFBQSxLQUFBLEdBQUEsS0FBQTtHQUNBLE1BQUEsT0FBQTtHQUNBLElBQUEsTUFBQSxLQUFBLEdBQUEsS0FBQTs7R0FFQSxHQUFBLEtBQUEsS0FBQTtHQUNBLEdBQUEsS0FBQSxLQUFBO0dBQ0EsR0FBQSxLQUFBLEtBQUE7R0FDQSxHQUFBLEtBQUEsS0FBQSxLQUFBLE1BQUEsS0FBQSxHQUFBLEdBQUEsS0FBQTtHQUNBLElBQUEsYUFBQSxJQUFBLEdBQUE7Ozs7Q0FJQSxJQUFBLFFBQUEsSUFBQTtDQUNBLE1BQUEsTUFBQSxPQUFBLFVBQUE7Q0FDQSxPQUFBOzs7QUFHQSxPQUFBLG9CQUFBLFNBQUEsT0FBQSxPQUFBLE1BQUE7Q0FDQSxJQUFBLFNBQUEsU0FBQSxjQUFBO0NBQ0EsT0FBQSxhQUFBLFNBQUEsTUFBQTtDQUNBLE9BQUEsYUFBQSxVQUFBLE1BQUE7Q0FDQSxJQUFBLE1BQUEsT0FBQSxXQUFBOztDQUVBLElBQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEtBQUE7RUFDQSxJQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxLQUFBO0dBQ0EsSUFBQSxRQUFBLEtBQUEsZUFBQSxPQUFBLE9BQUEsS0FBQSxFQUFBLEVBQUE7R0FDQSxJQUFBLFVBQUEsT0FBQSxNQUFBLEdBQUEsTUFBQSxHQUFBLE9BQUE7R0FDQSxRQUFBLElBQUEsZ0NBQUEsS0FBQSxNQUFBLENBQUEsRUFBQSxFQUFBLEdBQUEsS0FBQSxPQUFBLE9BQUE7OztDQUdBLElBQUEsTUFBQSxJQUFBO0NBQ0EsSUFBQSxNQUFBLE9BQUEsVUFBQTtDQUNBLE9BQUE7O0FBRUEiLCJmaWxlIjoiYnVuZGxlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyogQXBwIE1vZHVsZSAqL1xuXG52YXIgY3RBcHAgPSBhbmd1bGFyLm1vZHVsZSgnY3RBcHAnLCBbXG4gICduZ1JvdXRlJyxcbiAgJ2N0TWFpbicsXG5dKTtcblxuY3RBcHAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLFxuICBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAgICRyb3V0ZVByb3ZpZGVyLlxuICAgICAgd2hlbignLycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL01haW4vbWFpbi5odG1sJyxcbiAgICAgICAgY29udHJvbGxlcjogJ01haW5Db250cm9sbGVyJ1xuICAgICAgfSkuXG4gICAgICBvdGhlcndpc2Uoe1xuICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICAgIH0pO1xuICB9XSk7XG4iLCJcbnZhciBjb250YWluZXI7XG5cbnZhciBjYW1lcmEsIHNjZW5lLCByZW5kZXJlcjtcbnZhciBjYW1lcmFDdWJlLCBzY2VuZUN1YmU7XG5cbnZhciBtZXNoLCBsaWdodE1lc2gsIGdlb21ldHJ5O1xudmFyIHNwaGVyZXMgPSBbXTtcblxudmFyIGRpcmVjdGlvbmFsTGlnaHQsIHBvaW50TGlnaHQ7XG5cbnZhciBtb3VzZVggPSAwO1xudmFyIG1vdXNlWSA9IDA7XG5cbnZhciByeCA9IDUwMDA7XG52YXIgcnkgPSA1MDAwO1xuXG52YXIgd2luZG93SGFsZlggPSA2NDAgLyAyO1xudmFyIHdpbmRvd0hhbGZZID0gNDgwIC8gMjtcblxuXG5mdW5jdGlvbiBpbml0KCkge1xuXG4gIGNvbnRhaW5lciA9ICQoJyNtYWluJyk7XG5cbiAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCA2MCwgNjQwLzQ4MCwgMSwgMTAwMDAwICk7XG4gIGNhbWVyYS5wb3NpdGlvbi56ID0gMzIwMDtcblxuICBjYW1lcmFDdWJlID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCA2MCwgNjQwLzQ4MCwgMSwgMTAwMDAwICk7XG5cbiAgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgc2NlbmVDdWJlID0gbmV3IFRIUkVFLlNjZW5lKCk7XG5cbiAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUJ1ZmZlckdlb21ldHJ5KCAxMDAsIDMyLCAxNiApO1xuXG4gIHZhciBwYXRoID0gXCJhc3NldHMvaW1hZ2VzL3Bpc2EvXCI7XG4gIHZhciBmb3JtYXQgPSAnLnBuZyc7XG4gIHZhciB1cmxzID0gW1xuICAgIHBhdGggKyAncHgnICsgZm9ybWF0LCBwYXRoICsgJ254JyArIGZvcm1hdCxcbiAgICBwYXRoICsgJ3B5JyArIGZvcm1hdCwgcGF0aCArICdueScgKyBmb3JtYXQsXG4gICAgcGF0aCArICdweicgKyBmb3JtYXQsIHBhdGggKyAnbnonICsgZm9ybWF0XG4gIF07XG5cbiAgdmFyIHRleHR1cmVDdWJlID0gbmV3IFRIUkVFLkN1YmVUZXh0dXJlTG9hZGVyKCkubG9hZCggdXJscyApO1xuICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZmZmLCBlbnZNYXA6IHRleHR1cmVDdWJlIH0gKTtcblxuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCA1MDA7IGkgKysgKSB7XG5cbiAgICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuICAgIG1lc2gucG9zaXRpb24ueCA9IE1hdGgucmFuZG9tKCkgKiAxMDAwMCAtIDUwMDA7XG4gICAgbWVzaC5wb3NpdGlvbi55ID0gTWF0aC5yYW5kb20oKSAqIDEwMDAwIC0gNTAwMDtcbiAgICBtZXNoLnBvc2l0aW9uLnogPSBNYXRoLnJhbmRvbSgpICogMTAwMDAgLSA1MDAwO1xuXG4gICAgbWVzaC5zY2FsZS54ID0gbWVzaC5zY2FsZS55ID0gbWVzaC5zY2FsZS56ID0gTWF0aC5yYW5kb20oKSAqIDMgKyAxO1xuXG4gICAgc2NlbmUuYWRkKCBtZXNoICk7XG5cbiAgICBzcGhlcmVzLnB1c2goIG1lc2ggKTtcblxuICB9XG5cbiAgLy8gU2t5Ym94XG5cbiAgdmFyIHNoYWRlciA9IFRIUkVFLlNoYWRlckxpYlsgXCJjdWJlXCIgXTtcbiAgc2hhZGVyLnVuaWZvcm1zWyBcInRDdWJlXCIgXS52YWx1ZSA9IHRleHR1cmVDdWJlO1xuXG4gIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCgge1xuXG4gICAgZnJhZ21lbnRTaGFkZXI6IHNoYWRlci5mcmFnbWVudFNoYWRlcixcbiAgICB2ZXJ0ZXhTaGFkZXI6IHNoYWRlci52ZXJ0ZXhTaGFkZXIsXG4gICAgdW5pZm9ybXM6IHNoYWRlci51bmlmb3JtcyxcbiAgICBkZXB0aFdyaXRlOiBmYWxzZSxcbiAgICBzaWRlOiBUSFJFRS5CYWNrU2lkZVxuXG4gIH0gKSxcblxuICBtZXNoID0gbmV3IFRIUkVFLk1lc2goIG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSggMTAwLCAxMDAsIDEwMCApLCBtYXRlcmlhbCApO1xuICBzY2VuZUN1YmUuYWRkKCBtZXNoICk7XG5cbiAgLy9cblxuICByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKCk7XG4gIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8oIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICk7XG4gIHJlbmRlcmVyLnNldFNpemUoIDY0MCwgNDgwICk7XG4gIHJlbmRlcmVyLmF1dG9DbGVhciA9IGZhbHNlO1xuICByZW5kZXJlci5kb21FbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCAnY2FudmFzJyk7XG4gIGNvbnRhaW5lci5hcHBlbmQoIHJlbmRlcmVyLmRvbUVsZW1lbnQgKTtcblxuICAvL1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAncmVzaXplJywgb25XaW5kb3dSZXNpemUsIGZhbHNlICk7XG5cbn1cblxuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoKSB7XG5cbiAgd2luZG93SGFsZlggPSA2NDAgLyAyO1xuICB3aW5kb3dIYWxmWSA9IDQ4MCAvIDI7XG5cbiAgY2FtZXJhLmFzcGVjdCA9IDY0MC80ODA7XG4gIGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cbiAgY2FtZXJhQ3ViZS5hc3BlY3QgPSA2NDAvNDgwO1xuICBjYW1lcmFDdWJlLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXG4gIHJlbmRlcmVyLnNldFNpemUoIDY0MCwgNDgwICk7XG5cbn1cblxuZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlTW92ZSggZXZlbnQgKSB7XG5cbiAgbW91c2VYID0gKCBldmVudC5jbGllbnRYIC0gNjQwICkgKiAxMDtcbiAgbW91c2VZID0gKCBldmVudC5jbGllbnRZIC0gNDgwICkgKiAxMDtcblxufVxuXG5mdW5jdGlvbiBhbmltYXRlKCkge1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSggYW5pbWF0ZSApO1xuXG4gIHJlbmRlcigpO1xuXG59XG5cbmZ1bmN0aW9uIHJlbmRlcigpIHtcblxuICB2YXIgdGltZXIgPSAwLjAwMDEgKiBEYXRlLm5vdygpO1xuXG4gIGZvciAoIHZhciBpID0gMCwgaWwgPSBzcGhlcmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG4gICAgdmFyIHNwaGVyZSA9IHNwaGVyZXNbIGkgXTtcblxuICAgIHNwaGVyZS5wb3NpdGlvbi54ID0gcnggKiBNYXRoLmNvcyggdGltZXIgKyBpICk7XG4gICAgc3BoZXJlLnBvc2l0aW9uLnkgPSByeSAqIE1hdGguc2luKCB0aW1lciArIGkgKiAxLjEgKTtcblxuICB9XG5cbiAgY2FtZXJhLnBvc2l0aW9uLnggKz0gKCBtb3VzZVggLSBjYW1lcmEucG9zaXRpb24ueCApICogMC4wNTtcbiAgY2FtZXJhLnBvc2l0aW9uLnkgKz0gKCAtIG1vdXNlWSAtIGNhbWVyYS5wb3NpdGlvbi55ICkgKiAwLjA1O1xuXG4gIGNhbWVyYS5sb29rQXQoIHNjZW5lLnBvc2l0aW9uICk7XG4gIGNhbWVyYUN1YmUucm90YXRpb24uY29weSggY2FtZXJhLnJvdGF0aW9uICk7XG5cbiAgcmVuZGVyZXIucmVuZGVyKCBzY2VuZUN1YmUsIGNhbWVyYUN1YmUgKTtcbiAgcmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhICk7XG5cbn1cblxuXG4kKGRvY3VtZW50KS5vbigncmVhZHlGb3JDYW52YXMnLCBmdW5jdGlvbihldmVudCkge1xuICBjb25zb2xlLmxvZyhcInJlYWR5Rm9yQ2FudmFzXCIpO1xuICBpbml0KCk7XG4gIGFuaW1hdGUoKTtcbiAgJChcIiNjYW52YXNcIikub24oICdtb3VzZW1vdmUnLCBvbkRvY3VtZW50TW91c2VNb3ZlICk7XG59KTtcblxuJChkb2N1bWVudCkub24oJ3JvdGF0aW9uVmFsdWVDaGFuZ2VkJywgZnVuY3Rpb24oZXZlbnQsIHgsIHkpIHtcbiAgY29uc29sZS5sb2coJ3JvdGF0aW9uVmFsdWVDaGFuZ2VkOiAnICsgeCArICcsICcgKyB5KTtcbiAgcnggPSB4O1xuICByeSA9IHk7XG59KTtcbiIsIlxyXG52YXIgY29udGFpbmVyO1xyXG5cclxudmFyIGNhbWVyYSwgc2NlbmVGaXJzdFBhc3MsIHNjZW5lU2Vjb25kUGFzcywgcmVuZGVyZXI7XHJcbnZhciBydFRleHR1cmU7XHJcbnZhciBjdWJlVGV4dHVyZTtcclxudmFyIHRyYW5zZmVyVGV4dHVyZTtcclxuXHJcbnZhciBtYXRlcmlhbEZpcnN0UGFzcywgbWF0ZXJpYWxTZWNvbmRQYXNzO1xyXG5cclxudmFyIG1lc2gsIGdlb21ldHJ5O1xyXG52YXIgc3BoZXJlcyA9IFtdO1xyXG5cclxudmFyIHZlcnRleFNoYWRlcjEsIGZyYWdtZW50U2hhZGVyMTtcclxudmFyIHZlcnRleFNoYWRlcjIsIGZyYWdtZW50U2hhZGVyMjtcclxuXHJcbnZhciBzY3JlZW5TaXplID0ge3g6IDY0MCwgeTogNDgwfTtcclxudmFyIHdpbmRvd0hhbGZYID0gc2NyZWVuU2l6ZS54IC8gMjtcclxudmFyIHdpbmRvd0hhbGZZID0gc2NyZWVuU2l6ZS55IC8gMjtcclxuXHJcbmZ1bmN0aW9uIGxvYWRSZXNvdXJjZSh1cmwsIGNhbGxiYWNrKSB7XHJcbiAgJC5hamF4KHtcclxuICAgIHVybDogdXJsLFxyXG4gICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgZXJyb3I6IGZ1bmN0aW9uKGVycikge1xyXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuLy8gTG9hZCBzaGFkZXJzXHJcbmZ1bmN0aW9uIGxvYWRTaGFkZXJzKCkge1xyXG4gIGNvbnNvbGUubG9nKFwiSEVMTE9cIik7XHJcbiAgbG9hZFJlc291cmNlKCcvYXNzZXRzL3NoYWRlcnMvcmF5Y2FzdGVyLmZpcnN0cGFzcy52cycsIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xyXG4gICAgaWYoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICB9XHJcbiAgICB2ZXJ0ZXhTaGFkZXIxID0gZGF0YTtcclxuXHJcbiAgICBsb2FkUmVzb3VyY2UoJy9hc3NldHMvc2hhZGVycy9yYXljYXN0ZXIuZmlyc3RwYXNzLmZzJywgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XHJcbiAgICAgIGlmKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgIH1cclxuICAgICAgZnJhZ21lbnRTaGFkZXIxID0gZGF0YTtcclxuXHJcbiAgICAgIGxvYWRSZXNvdXJjZSgnL2Fzc2V0cy9zaGFkZXJzL3JheWNhc3Rlci5zZWNvbmRwYXNzLnZzJywgZnVuY3Rpb24oZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgaWYoZXJyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2ZXJ0ZXhTaGFkZXIyID0gZGF0YTtcclxuXHJcbiAgICAgICAgbG9hZFJlc291cmNlKCcvYXNzZXRzL3NoYWRlcnMvcmF5Y2FzdGVyLnNlY29uZHBhc3MuZnMnLCBmdW5jdGlvbihlcnIsIGRhdGEpIHtcclxuICAgICAgICAgIGlmKGVycikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZnJhZ21lbnRTaGFkZXIyID0gZGF0YTtcclxuICAgICAgICAgIGluaXQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGluaXQoKSB7XHJcblxyXG4gIGNvbnRhaW5lciA9ICQoJyNtYWluJyk7XHJcblxyXG4gIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSggNjAsIHNjcmVlblNpemUueC9zY3JlZW5TaXplLnksIDAuMSwgMTAwMDAwICk7XHJcbiAgY2FtZXJhLnBvc2l0aW9uLnogPSAyO1xyXG5cclxuICBzY2VuZUZpcnN0UGFzcyA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG5cdHNjZW5lU2Vjb25kUGFzcyA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG5cclxuICB2YXIgcmFuZG9tZGF0YSA9IFtdO1xyXG4gIGZvciggdmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xyXG4gICAgcmFuZG9tZGF0YVtpXSA9IFtdO1xyXG4gICAgZm9yKCB2YXIgaiA9IDA7IGogPCA2NDsgaisrKSB7XHJcbiAgICAgIHJhbmRvbWRhdGFbaV1bal0gPSBbXTtcclxuICAgICAgZm9yKCB2YXIgayA9IDA7IGsgPCA2NDsgaysrKSB7XHJcbiAgICAgICAgcmFuZG9tZGF0YVtpXVtqXS5wdXNoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSo0MDk1KSk7XHJcbiAgICAgICAgaWYoTWF0aC5yYW5kb20oKSoxID49IDEvNjQuMCppKjEuMSkge1xyXG4gICAgICAgICAgcmFuZG9tZGF0YVtpXVtqXVtrXSA9IDAuMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKFwicmFuZG9tIGRhdGEgcHJvZ3Jlc3M6IFwiICsgaS82NCArIFwiICVcIik7XHJcbiAgfVxyXG5cclxuICB2YXIgaW1hZ2UgPSBtb3NhaWMuY3JlYXRlTW9zYWljSW1hZ2UoNjQsNjQscmFuZG9tZGF0YSk7Ly9USFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKCcvYXNzZXRzL2ltYWdlcy9ib25zYWkucmF3LnBuZycgKTtcclxuICBjb25zb2xlLmxvZyhpbWFnZSk7XHJcbiAgY3ViZVRleHR1cmUgPSBuZXcgVEhSRUUuVGV4dHVyZShpbWFnZSk7XHJcbiAgY29uc29sZS5sb2coY3ViZVRleHR1cmUpO1xyXG4gIC8vY3ViZVRleHR1cmUgPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKCcvYXNzZXRzL2ltYWdlcy9ib25zYWkucmF3LnBuZycpO1xyXG4gIGN1YmVUZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xyXG4gIGN1YmVUZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjtcclxuICBjdWJlVGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5MaW5lYXJGaWx0ZXI7XHJcblxyXG4gIC8vJChcIiN0ZXN0XCIpLmFwcGVuZChpbWFnZSk7XHJcblxyXG4gIHRyYW5zZmVyVGV4dHVyZSA9IHVwZGF0ZVRyYW5zZmVyRnVuY3Rpb24oKTtcclxuXHJcbiAgcnRUZXh0dXJlID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0KCBzY3JlZW5TaXplLngsIHNjcmVlblNpemUueSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHsgXHRtaW5GaWx0ZXI6IFRIUkVFLkxpbmVhckZpbHRlcixcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWFnRmlsdGVyOiBUSFJFRS5MaW5lYXJGaWx0ZXIsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHdyYXBTOiAgVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0d3JhcFQ6ICBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmb3JtYXQ6IFRIUkVFLlJHQkZvcm1hdCxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogVEhSRUUuRmxvYXRUeXBlLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRnZW5lcmF0ZU1pcG1hcHM6IGZhbHNlfSApO1xyXG5cclxuXHJcbiAgbWF0ZXJpYWxGaXJzdFBhc3MgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoIHtcclxuICBcdHZlcnRleFNoYWRlcjogdmVydGV4U2hhZGVyMSxcclxuICBcdGZyYWdtZW50U2hhZGVyOiBmcmFnbWVudFNoYWRlcjEsXHJcbiAgXHRzaWRlOiBUSFJFRS5CYWNrU2lkZVxyXG4gIH0gKTtcclxuXHJcblx0bWF0ZXJpYWxTZWNvbmRQYXNzID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKCB7XHJcbiAgXHR2ZXJ0ZXhTaGFkZXI6IHZlcnRleFNoYWRlcjIsXHJcbiAgXHRmcmFnbWVudFNoYWRlcjogZnJhZ21lbnRTaGFkZXIyLFxyXG5cdFx0c2lkZTogVEhSRUUuRnJvbnRTaWRlLFxyXG5cdFx0dW5pZm9ybXM6IHtcclxuICAgICAgdGV4OiAge1xyXG4gICAgICAgIHR5cGU6IFwidFwiLFxyXG4gICAgICAgIHZhbHVlOiBydFRleHR1cmVcclxuICAgICAgfSxcclxuXHRcdFx0Y3ViZVRleDpcclxuICAgICAge1xyXG4gICAgICAgIHR5cGU6IFwidFwiLFxyXG4gICAgICAgIHZhbHVlOiBjdWJlVGV4dHVyZVxyXG4gICAgICB9LFxyXG5cdFx0XHR0cmFuc2ZlclRleDpcclxuICAgICAge1xyXG4gICAgICAgIHR5cGU6IFwidFwiLFxyXG4gICAgICAgIHZhbHVlOiB0cmFuc2ZlclRleHR1cmVcclxuICAgICAgfSxcclxuXHRcdFx0c3RlcHMgOiB7XHJcbiAgICAgICAgdHlwZTogXCIxZlwiICxcclxuICAgICAgICB2YWx1ZTogNjRcclxuICAgICAgfSxcclxuXHRcdFx0YWxwaGFDb3JyZWN0aW9uIDoge1xyXG4gICAgICAgIHR5cGU6IFwiMWZcIiAsXHJcbiAgICAgICAgdmFsdWU6IDEuMFxyXG4gICAgICB9XHJcbiAgICB9XHJcblx0IH0pO1xyXG5cclxuXHJcbiAgLy8gR2VvbWV0cnkgc2V0dXBcclxuXHR2YXIgYm94R2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMS4wLCAxLjAsIDEuMCk7XHJcblx0Ym94R2VvbWV0cnkuZG91YmxlU2lkZWQgPSB0cnVlO1xyXG5cdHZhciBtZXNoRmlyc3RQYXNzID0gbmV3IFRIUkVFLk1lc2goIGJveEdlb21ldHJ5LCBtYXRlcmlhbEZpcnN0UGFzcyApO1xyXG5cdHZhciBtZXNoU2Vjb25kUGFzcyA9IG5ldyBUSFJFRS5NZXNoKCBib3hHZW9tZXRyeSwgbWF0ZXJpYWxTZWNvbmRQYXNzICk7XHJcblx0c2NlbmVGaXJzdFBhc3MuYWRkKCBtZXNoRmlyc3RQYXNzICk7XHJcblx0c2NlbmVTZWNvbmRQYXNzLmFkZCggbWVzaFNlY29uZFBhc3MgKTtcclxuXHJcblxyXG4gIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcclxuICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyApO1xyXG4gIHJlbmRlcmVyLnNldFNpemUoIHNjcmVlblNpemUueCwgc2NyZWVuU2l6ZS55ICk7XHJcbiAgcmVuZGVyZXIuYXV0b0NsZWFyID0gdHJ1ZTtcclxuICByZW5kZXJlci5zZXRDbGVhckNvbG9yKFwiI0ZGRkZGRlwiKTtcclxuICBjb25zb2xlLmxvZyhcImNsZWFyIGNvbG9yOiBcIik7XHJcbiAgY29uc29sZS5sb2cocmVuZGVyZXIuZ2V0Q2xlYXJDb2xvcigpKTtcclxuICByZW5kZXJlci5kb21FbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCAnY2FudmFzJyk7XHJcbiAgY29udGFpbmVyLmFwcGVuZCggcmVuZGVyZXIuZG9tRWxlbWVudCApO1xyXG5cclxuICB2YXIgYiA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgyLDIsMik7XHJcbiAgdmFyIGJtYXQgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe2NvbG9yOiBcIiNGRjAwMDBcIn0pO1xyXG5cclxuICB2YXIgYm1lc2ggPSBuZXcgVEhSRUUuTWVzaChiLCBibWF0KTtcclxuICBibWVzaC5wb3NpdGlvbi54ID0gMDtcclxuICBibWVzaC5wb3NpdGlvbi55ID0gMDtcclxuICBibWVzaC5wb3NpdGlvbi56ID0gMDtcclxuXHJcbiAgLy9zY2VuZVNlY29uZFBhc3MuYWRkKGJtZXNoKTtcclxuXHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSwgZmFsc2UgKTtcclxuXHJcbiAgYW5pbWF0ZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcclxuXHJcbiAgd2luZG93SGFsZlggPSBzY3JlZW5TaXplLnggLyAyO1xyXG4gIHdpbmRvd0hhbGZZID0gc2NyZWVuU2l6ZS55IC8gMjtcclxuXHJcbiAgY2FtZXJhLmFzcGVjdCA9IHNjcmVlblNpemUueC9zY3JlZW5TaXplLnk7XHJcbiAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHJcbiAgcmVuZGVyZXIuc2V0U2l6ZSggc2NyZWVuU2l6ZS54LCBzY3JlZW5TaXplLnkgKTtcclxuXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBhbmltYXRlKCkge1xyXG5cclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIGFuaW1hdGUgKTtcclxuXHJcbiAgcmVuZGVyKCk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXIoKSB7XHJcblxyXG4gIC8vdmFyIGRlbHRhID0gY2xvY2suZ2V0RGVsdGEoKTtcclxuXHQvL1JlbmRlciBmaXJzdCBwYXNzIGFuZCBzdG9yZSB0aGUgd29ybGQgc3BhY2UgY29vcmRzIG9mIHRoZSBiYWNrIGZhY2UgZnJhZ21lbnRzIGludG8gdGhlIHRleHR1cmUuXHJcblx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZUZpcnN0UGFzcywgY2FtZXJhLCBydFRleHR1cmUsIHRydWUgKTtcclxuXHQvL1JlbmRlciB0aGUgc2Vjb25kIHBhc3MgYW5kIHBlcmZvcm0gdGhlIHZvbHVtZSByZW5kZXJpbmcuXHJcblx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZVNlY29uZFBhc3MsIGNhbWVyYSApO1xyXG5cdG1hdGVyaWFsU2Vjb25kUGFzcy51bmlmb3Jtcy5zdGVwcy52YWx1ZSA9IDI1NjtcclxuXHRtYXRlcmlhbFNlY29uZFBhc3MudW5pZm9ybXMuYWxwaGFDb3JyZWN0aW9uLnZhbHVlID0gMS4wO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlVGV4dHVyZXModmFsdWUpIHtcclxuICBtYXRlcmlhbFNlY29uZFBhc3MudW5pZm9ybXMudHJhbnNmZXJUZXgudmFsdWUgPSB1cGRhdGVUcmFuc2ZlckZ1bmN0aW9uKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVRyYW5zZmVyRnVuY3Rpb24oKSB7XHJcblx0dmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG5cdGNhbnZhcy5oZWlnaHQgPSAyMDtcclxuXHRjYW52YXMud2lkdGggPSAyNTY7XHJcblx0dmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cdHZhciBncmQgPSBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgY2FudmFzLndpZHRoIC0xICwgY2FudmFzLmhlaWdodCAtIDEpO1xyXG5cdGdyZC5hZGRDb2xvclN0b3AoMC4xLCBcIiMwMEZGMDBcIik7XHJcblx0Z3JkLmFkZENvbG9yU3RvcCgwLjcsIFwiI0ZGMDAwMFwiKTtcclxuXHRncmQuYWRkQ29sb3JTdG9wKDEuMCwgXCIjMDAwMEZGXCIpO1xyXG5cdGN0eC5maWxsU3R5bGUgPSBncmQ7XHJcblx0Y3R4LmZpbGxSZWN0KDAsMCxjYW52YXMud2lkdGggLTEgLGNhbnZhcy5oZWlnaHQgLTEgKTtcclxuXHJcbiAgdmFyIGltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHJhbnNmZXJUZXh0dXJlXCIpO1xyXG5cdFx0XHRcdGltZy5zcmMgPSBjYW52YXMudG9EYXRhVVJMKCk7XHJcblx0XHRcdFx0aW1nLnN0eWxlLndpZHRoID0gXCIyNTYgcHhcIjtcclxuXHRcdFx0XHRpbWcuc3R5bGUuaGVpZ2h0ID0gXCIyMCBweFwiO1xyXG5cclxuXHR0cmFuc2ZlclRleHR1cmUgPSAgbmV3IFRIUkVFLlRleHR1cmUoY2FudmFzKTtcclxuXHR0cmFuc2ZlclRleHR1cmUud3JhcFMgPSB0cmFuc2ZlclRleHR1cmUud3JhcFQgPSAgVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZztcclxuXHR0cmFuc2ZlclRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cdHJldHVybiB0cmFuc2ZlclRleHR1cmU7XHJcbn1cclxuXHJcblxyXG4kKGRvY3VtZW50KS5vbigncmVhZHlGb3JDYW52YXNSYXljYXN0ZXInLCBmdW5jdGlvbihldmVudCkge1xyXG4gIGNvbnNvbGUubG9nKFwicmVhZHlGb3JDYW52YXNSYXljYXN0ZXJcIik7XHJcbiAgbG9hZFNoYWRlcnMoKTtcclxuICAkKFwiI2NhbnZhc1wiKS5vbiggJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUgKTtcclxufSk7XHJcblxyXG4kKGRvY3VtZW50KS5vbigncm90YXRpb25WYWx1ZUNoYW5nZWQnLCBmdW5jdGlvbihldmVudCwgeCwgeSkge1xyXG4gIGNvbnNvbGUubG9nKCdyb3RhdGlvblZhbHVlQ2hhbmdlZDogJyArIHggKyAnLCAnICsgeSk7XHJcbiAgcnggPSB4O1xyXG4gIHJ5ID0geTtcclxufSk7XHJcbiIsIlxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgbWFpbiA9IGFuZ3VsYXIubW9kdWxlKCdjdE1haW4nLCBbXSk7XHJcblxyXG5tYWluLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcclxuICAkKGRvY3VtZW50KS50cmlnZ2VyKCdyZWFkeUZvckNhbnZhc1JheWNhc3RlcicpO1xyXG5cclxuICAkc2NvcGUudXBkYXRlUm90YXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgIGNvbnNvbGUubG9nKFwib25DbGlja1JvdGF0aW9uQ2hhbmdlZFwiKTtcclxuICAgICQoZG9jdW1lbnQpLnRyaWdnZXIoJ3JvdGF0aW9uVmFsdWVDaGFuZ2VkJywgW3BhcnNlSW50KCRzY29wZS5yb3RhdGlvbi54KSwgcGFyc2VJbnQoJHNjb3BlLnJvdGF0aW9uLnkpXSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gdmFyIHJhbmRvbWRhdGEgPSBbXTtcclxuICAvLyBmb3IoIHZhciBpID0gMDsgaSA8IDEyODsgaSsrKSB7XHJcbiAgLy8gICByYW5kb21kYXRhW2ldID0gW107XHJcbiAgLy8gICBmb3IoIHZhciBqID0gMDsgaiA8IDEyODsgaisrKSB7XHJcbiAgLy8gICAgIHJhbmRvbWRhdGFbaV1bal0gPSBbXTtcclxuICAvLyAgICAgZm9yKCB2YXIgayA9IDA7IGsgPCAxMjg7IGsrKykge1xyXG4gIC8vICAgICAgIHJhbmRvbWRhdGFbaV1bal0ucHVzaChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqNDA5NSkpO1xyXG4gIC8vICAgICB9XHJcbiAgLy8gICB9XHJcbiAgLy8gICBjb25zb2xlLmxvZyhcInJhbmRvbSBkYXRhIHByb2dyZXNzOiBcIiArIGkvMTI4KSArIFwiICVcIjtcclxuICAvLyB9XHJcbi8vICBjb25zb2xlLmxvZyhcIkhlbGxvIG1vc2FpY1wiKTtcclxuLy8gICQoXCIjdGVzdFwiKS5hcHBlbmQobW9zYWljLmNyZWF0ZU1vc2FpY0ltYWdlKDEyOCwgMTI4LCByYW5kb21kYXRhKSk7XHJcbn1dKTtcclxuIiwidmFyIG1vc2FpYyA9IHt9O1xyXG5cclxubW9zYWljLmNyZWF0ZU9uZUltYWdlID0gZnVuY3Rpb24oc2l6ZXgsIHNpemV5LCBkYXRhKSB7XHJcblx0dmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcblx0Y2FudmFzLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHNpemV4KTtcclxuXHRjYW52YXMuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIHNpemV5KTtcclxuXHR2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRmb3IodmFyIGogPSAwOyBqIDwgZGF0YVswXS5sZW5ndGg7IGorKykge1xyXG5cdFx0XHR2YXIgaWQgPSBjdHguY3JlYXRlSW1hZ2VEYXRhKDEsMSk7XHJcblx0XHRcdHZhciBtc2IgPSBkYXRhW2ldW2pdICYgMHhGRjAwO1xyXG5cdFx0XHRtc2IgPSBtc2IgPj4gODtcclxuXHRcdFx0dmFyIGxzYiA9IGRhdGFbaV1bal0gJiAweDAwRkY7XHJcblx0XHRcdC8vIFVzZSBiaXRtYXNrIGZvciBzcGxpdGluZyB0aGUgdWludDE2IHZhbHVlIGludG8gdHdvIHVpbnQ4IHRvIGZpdCBpbnRvIGltZ1xyXG5cdFx0XHRpZC5kYXRhWzBdID0gbXNiO1x0Ly8gclxyXG5cdFx0XHRpZC5kYXRhWzFdID0gbHNiO1x0Ly8gZ1xyXG5cdFx0XHRpZC5kYXRhWzJdID0gMDtcdC8vIGJcclxuXHRcdFx0aWQuZGF0YVszXSA9IE1hdGguZmxvb3IoZGF0YVtpXVtqXS80MDk1KjI1NSk7XHQvLyBhXHJcblx0XHRcdGN0eC5wdXRJbWFnZURhdGEoaWQsIGosIGkpOyAvLyByb3cgYmFzZWQsIHNvIGFkZCB0byB4PWosIHk9aVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dmFyIGltYWdlID0gbmV3IEltYWdlKCk7XHJcblx0aW1hZ2Uuc3JjID0gY2FudmFzLnRvRGF0YVVSTChcIi9pbWFnZS9wbmdcIik7XHJcblx0cmV0dXJuIGltYWdlO1xyXG59XHJcblxyXG5tb3NhaWMuY3JlYXRlTW9zYWljSW1hZ2UgPSBmdW5jdGlvbihzaXpleCwgc2l6ZXksIGRhdGEpIHtcclxuXHR2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuXHRjYW52YXMuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgc2l6ZXgqOCk7XHJcblx0Y2FudmFzLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBzaXpleSo4KTtcclxuXHR2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuXHRcdGZvcih2YXIgaiA9IDA7IGogPCA4OyBqKyspIHtcclxuXHRcdFx0dmFyIGltYWdlID0gdGhpcy5jcmVhdGVPbmVJbWFnZShzaXpleCwgc2l6ZXksIGRhdGFbaSpqK2pdKTtcclxuXHRcdFx0Y3R4LmRyYXdJbWFnZShpbWFnZSwgc2l6ZXgqaSwgc2l6ZXkqaiwgc2l6ZXgsIHNpemV5KTtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJpbWFnZSBnZW5lcmF0aW9uIHByb2dyZXNzOiBcIiArIE1hdGguZmxvb3IoKGkqaitqKS9kYXRhLmxlbmd0aCoxMDApICsgXCIgJVwiKTtcclxuXHRcdH1cclxuXHR9XHJcblx0dmFyIGltZyA9IG5ldyBJbWFnZSgpO1xyXG5cdGltZy5zcmMgPSBjYW52YXMudG9EYXRhVVJMKFwiL2ltYWdlL3BuZ1wiKTtcclxuXHRyZXR1cm4gaW1nO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
